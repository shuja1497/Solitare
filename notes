
objects needed for the game >>>
1. card.
2. deck.
3. waste pile.
4. foundation pile ( where we must make the final sets ).
5. tableau pile (where the game will go on ).
6. object that will handle the game itself. >> setting up the game and handling any actions. (dealer) >> Model Layer

Layers >>
> View (interface with one func to update the view )
> Presenter (Act as a middle man between model and view layer.)
> Model ()

Presenter >> whenever we take an action on a view by clicking on a tableau , a method will be called on the
presenter layer. This method will update the model and after doing that it will  update the view to reflect any changes
made to the model.

Waste Pile >> * add , * remove , * shuffle(remove all the cards)

Foundation Pile >>
* each foundation pile needs to correspond to a specific suit.
* they must follow the series from ace to the king (0 to 12)
* Actions >>> add , remove , reset.

there is nothing static in kotlin
alternatively companion object is used .
a class can have only one companion object.

************** in kotlin whenever we put a variable or a function outside the class then it can be used anywhere
in the package or the app **********************

>> empty tableau pile will only accept king as the first card

Tests >>>
1. arrange the objects we need
2. Act on those objects
3. Asserting that we got the right result

>>>>>> Starting the game
> empty waste pile
> empty foundation pile
> shuffle the deck and deal the card in 7 new tableau piles

***** extension function >> adding any function to existing classes ******